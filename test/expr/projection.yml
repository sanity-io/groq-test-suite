name: "Projection expression"
version: '>= 2.0.0'

documents:
- _id: "a"
  _type: "test"
  name: "A"
  other:
    _ref: "b"
  weakother:
    _ref: "b"
    _weak: true
  others:
  - _ref: "e"
  - _ref: "c"
  - _ref: "b"
  - _ref: "d"
- _id: "b"
  _type: "test"
  name: "B"
  other:
    _ref: "c"
  weakother:
    _type: "reference"
    _ref: "c"
    _weak: true
- _id: "c"
  _type: "test"
  name: "C"
  other:
    _ref: "e"
- _id: "d"
  _type: "test"
  name: "D"
- _id: "e"
  _type: "test"
  name: "E"
- _id: "id"
  _type: "values"
  v_array: [1, "string", true, null, [1, 2, 3], {"key": "value"}]
  v_decimal: 3.14
  v_false: false
  v_integer: 1
  v_object: {
    "v_array": ["a", "b", "c"],
    "v_boolean": true,
    "v_decimal": 2.718,
    "v_integer": 2,
    "v_object": {"k": "v"},
    "v_string": "abc"
  }
  v_ref:
    _ref: "a"
    _type: "reference"
  v_string: "string"
  v_true: true
- _id: "1"
  _type: "number"
  numberValue: 1
- _id: "2"
  _type: "number"
  numberValue: 2
- _id: "3"
  _type: "string"
  stringValue: "three"
- _id: "4"
  _type: "string"
  stringValue: "four"

tests:
- name: "Various values"
  query: |
    *[_id=="id"]{
      "attr_array": v_array,
      "attr_array_2": v_array[2],
      "attr_array_6": v_array[6],
      "attr_decimal": v_decimal,
      "attr_false": v_false,
      "attr_integer": v_integer,
      "attr_missing": missing,
      "attr_object": v_object,
      "attr_object_array": v_object.v_array,
      "attr_object_array_2": v_object.v_array[2],
      "attr_object_array_6": v_object.v_array[6],
      "attr_object_boolean": v_object.v_boolean,
      "attr_object_decimal": v_object.v_decimal,
      "attr_object_integer": v_object.v_integer,
      "attr_object_object": v_object.v_object,
      "attr_object_object_k": v_object.v_object.k,
      "attr_object_object_missing": v_object.v_object.missing,
      "attr_object_string": v_object.v_string,
      "attr_string": v_string,
      "attr_true": v_true,
      "attr__id": _id,
    }
  result:
  - attr__id: id
    attr_array: [1, "string", true, null, [1, 2, 3], {"key": "value"}]
    attr_array_2: true
    attr_array_6: null
    attr_decimal: 3.14
    attr_false: false
    attr_integer: 1
    attr_missing: null
    attr_object:
      v_array: ["a", "b", "c"]
      v_boolean: true
      v_decimal: 2.718
      v_integer: 2
      v_object: {"k": "v"}
      v_string: abc
    attr_object_array: ["a", "b", "c"]
    attr_object_array_2: "c"
    attr_object_array_6: null
    attr_object_boolean: true
    attr_object_decimal: 2.718
    attr_object_integer: 2
    attr_object_object: {"k": "v"}
    attr_object_object_k: "v"
    attr_object_object_missing: null
    attr_object_string: "abc"
    attr_string: "string"
    attr_true: true

- name: "Create nested object"
  query: |
    *[_id=="id"]{
      "nested": {
        "integer": v_integer,
        "deeper": {
          "string": v_string,
          "object": v_object.v_object,
        }
      },
    }
  result:
  - nested:
      deeper:
        object:
          k: v
        string: string
      integer: 1

- name: "After slice"
  query: |
    *[_type=="test"][0..2]~expr~
  tests:
    - variables: {expr: "{_id, name}"}
      result:
      - _id: a
        name: A
      - _id: b
        name: B
      - _id: c
        name: C
    - variables: {expr: '{"label": name}'}
      result:
      - label: A
      - label: B
      - label: C
    - variables: {expr: '{"name": _id}'}
      result:
      - name: a
      - name: b
      - name: c

- name: "Dereference"
  query: |
    *[_type=="test"]{"other": other->_id}
  result:
  - {other: b}
  - {other: c}
  - {other: e}
  - {other: null}
  - {other: null}

- name: "Splat"
  query: |
    *[_id=="c"]{...}
  result:
  - _id: "c"
    _type: "test"
    name: "C"
    other:
      _ref: "e"

- name: "Splat with extra parameters"
  query: |
    *[_id=="c"]{..., "label": name}
  result:
  - _id: "c"
    _type: "test"
    name: "C"
    label: "C"
    other:
      _ref: "e"

- name: "Splat with overriding parameters"
  query: |
    *[_id=="c"]{"name": "A", ..., "other": name}
  result:
  - _id: "c"
    _type: "test"
    name: "C"
    other: "C"

- name: "Splat object"
  query: |
    *[_id=="c"]{...{"label": name}}
  result:
  - label: "C"

- name: "Documents, conditionals"
  query: |
    *[_type in ["number", "string"]]{
      _type == "number" => {
        "v": numberValue
      },
      _type == "string" => {
        "v": stringValue
      }
    }
  result:
  - v: 1
  - v: 2
  - v: three
  - v: four

- name: "Documents, conditionals overlap"
  query: |
    *[_type in ["number", "string"]]{
      _type == "number" => {
        "v": numberValue,
        "number": 0
      },
      _type == "number" => {
        "number": numberValue
      }
    }
  result:
  - v: 1
    number: 1
  - v: 2
    number: 2
  - {}
  - {}

- name: "Documents nested"
  query: |
    *[_id=="a"][0]{_id, others{_ref}}
  result:
    _id: a
    others: null

- name: "Documents nested 2"
  query: |
    *[_id=="a"][0]{_id, others[]{_ref}}
  result:
    _id: a
    others:
    - _ref: e
    - _ref: c
    - _ref: b
    - _ref: d

- name: "Documents multiple"
  query: |
    *[_id=="id"]{
        v_integer,
        "string": v_string,
    }{...}{
      "integer": v_integer,
      string,
      v_true,
    }

- name: "Documents, object LHS"
  query: |
    *[_id == "id"][0].v_object{v_boolean}
  result:
    v_boolean: true

- name: "Documents, boolean LHS"
  query: |
    *[_id == "id"][0].v_object.v_boolean{"value": !@}
  result: null

- name: "Literals"
  query: |
    [{"v": 1}, {"v": 2}, {"v": 3}]
    {
      v,
      "string": "abc",
      "again": v,
      "missing": missing,
    }
  result:
  - v: 1
    string: abc
    again: 1
    missing: null
  - v: 2
    string: abc
    again: 2
    missing: null
  - v: 3
    string: abc
    again: 3
    missing: null

- name: "Literals, missing"
  query: |
    [{"v": 1}]
    {
      v,
      "string": "abc",
      "again": v,
      "missing": missing,
    }

  result:
  - v: 1
    string: abc
    again: 1
    missing: null

- title: "Literals multiple"
  query: |
    [{"v": 1}, {"v": 2}, {"v": 3}]
    {"value": v}[0..1]{"again": value}
  result:
  - again: 1
  - again: 2

- name:
  query: |
    [{"v": 1}]
    {"v": 1}{"value": v}{"again": value}
  result:
  - again: 1

- name: "Null literal"
  query: |
    null {
      something,
      "key": value,
      "stuff": stuff->stuff,
      "dogs": dogs[]->{cat}
    }
  result: null

- name: "Missing document"
  query: |
    *[doesNotExist == true][0]{
      something,
      "key": value,
      "stuff": stuff->stuff,
      "dogs": dogs[]->{cat}
    }
  result: null

- name: "Null parent scoping"
  query: |
    *[_id == "a"]{"a": ^.a}
  result:
  - {a: null}

- name: "Parent scoping"
  query: |
    *[_id == "a"]{
      other->{
        "a": _id,
        "b": ^._id,
      }
    }
  result:
  - other:
      a: "b"
      b: "a"

- name: "Grand parent scoping"
  query: |
    *[_id == "a"]{
      other->{
        other->{
          "a": _id,
          "b": ^._id,
          "c": ^.^._id,
        }
      }
    }
  result:
  - other:
      other:
        a: "c"
        b: "b"
        c: "a"

- name: "Grand parent scoping"
  query: |
    *[_id == "a"]{
      _id,
      "reverse": *[_id == ^.other._ref]{
        _id,
        "grandparent": *[_id == ^.^._id][0]._id
      }
    }
  result:
  - _id: "a"
    reverse:
    - _id: "b"
      grandparent: "a"

- name: "Projection after array traversal"
  query: |
    [[1, 2], [3, 4]][]{"values": @}
  result:
  - null
  - null