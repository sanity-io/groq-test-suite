name: "Match operator"

variables:
  text: |
    "hello world FOO-bar ding.dong A.B.C.s! посчастливится!"

tests:
- query: |
    ~text~ match ~pattern~
  tests:
  - name: "Basic match"
    result: true
    variables:
      pattern:
      - '"foo"'
      - '"foo-bar"'
      - '"hello"'
      - '"hello world"'
      - '"HELLO"'
      - '"HELLO WORLD"'
      - '"посчастливится"'
      - '"A.B.C.s"'
      - '"ding.dong"'
  - name: "Basic non-match"
    result: false
    variables:
      pattern:
      - '"foos"'
      - '"hell"'
      - '"ding dong"'

- query: |
    ~text~ match ~pattern~
  tests:
  - name: "Wildcard match"
    features:
    - wildcardMatchSegmentation
    result: true
    variables:
      pattern:
      - '"hello*"'
      - '"hel*"'
      - '"foo"'
      - '"bar"'
      - '"*ld"'
      - '"h*l*o"'
      - '"foo-bar"'
      - '"hel* bar"'
      - '"hello bar*"'
      - '["hel*", "bar"]'
      - '["hello", "foo"]'
      - '"ding*"'
      - '"ding.*"'
      - '"ding.*ong"'
      - '"*dong"'
      - '"*.dong"'
      - '"*"'
  - name: "Wildcard non-match"
    result: false
    features:
    - wildcardMatchSegmentation
    variables:
      pattern:
      - '"fo"'
      - '"hell"'
      - '"fo bar"'

- name: "Multiple text"
  variables:
    abc: '"abc"'
  query: |
    ~text~ match ~abc~
  tests:
  - {variables: {text: '["abc"]'}, result: true}
  - {variables: {text: '["abc", "def"]'}, result: true}
  - {variables: {text: '["def"]'}, result: false}
  - {variables: {text: '[]'}, result: false}

- name: "Unsupported RHS"
  version: ">= 1.0"
  variables:
    expr:
    - '123'
    - '{}'
    - '[1]'
    - '["1", 2]'
    - '123'
    - 'true'
    - 'false'
    - 'null'
  query: |
    "" match ~expr~
  result: false

- name: "Unsupported LHS"
  version: ">= 1.0"
  variables:
    expr:
    - '{}'
    - '[1]'
    - '123'
    - 'true'
    - 'false'
    - 'null'
  query: |
    ~expr~ match ""
  result: false
